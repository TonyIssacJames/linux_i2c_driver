diff --git a/P02_i2c_init/i2c_char.c b/P02_i2c_init/i2c_char.c
index 1a8dbf6..5e126b7 100644
--- a/P02_i2c_init/i2c_char.c
+++ b/P02_i2c_init/i2c_char.c
@@ -21,12 +21,16 @@ static int my_close(struct inode *i, struct file *f)
 static ssize_t my_read(struct file *f, char __user *buf, size_t count, loff_t *off)
 {
 	// TODO: Add the code here
+	printk(KERN_ALERT "my_read done\n");
+	i2c_receive(NULL, 0);
 	return 0;
 }
 
 static ssize_t my_write(struct file *f, const char __user *buf, size_t count, loff_t *off)
 {
 	// TODO: Add the code here
+	printk(KERN_ALERT "my_write done\n");
+	i2c_transmit(NULL, 0);
 	return count;
 }
 
@@ -42,6 +46,9 @@ static struct file_operations driver_fops =
 int chrdrv_init(struct omap_i2c_dev *i2c_dev)
 {
 	static int i2c_num = 0;
+	struct device *dev_ret;
+	int ret;
+
 	int init_result = alloc_chrdev_region(&i2c_dev->devt, 0, 1, "i2c_drv");
 
 	if (0 > init_result)
@@ -53,14 +60,40 @@ int chrdrv_init(struct omap_i2c_dev *i2c_dev)
 
 	// TODO: Create the device file
 
+	if (IS_ERR(dev_ret = device_create(i2c_dev->i2c_class, NULL, i2c_dev->devt, NULL, "myi2c")))
+	{
+		printk(KERN_ALERT "TONY: Error 3\n");
+		class_destroy(i2c_dev->i2c_class);
+		unregister_chrdev_region(i2c_dev->devt, 1);
+		return PTR_ERR(dev_ret);
+	}
+
 	// TODO: Register the file_operations
+    	cdev_init(&i2c_dev->cdev, &driver_fops);
+
+	if ((ret = cdev_add(&i2c_dev->cdev, i2c_dev->devt, 1)) < 0)
+	{
+		printk(KERN_ALERT "TONY: Error 4\n");
+		device_destroy(i2c_dev->i2c_class, i2c_dev->devt);
+		class_destroy(i2c_dev->i2c_class);
+		unregister_chrdev_region(i2c_dev->devt, 1);
+		return ret;
+	}
+
+	printk(KERN_ALERT "chrdrv_init successful- ass02 1\n");
+	printk(KERN_INFO "chrdrv_init successful- ass02 2\n");
 	return 0;
 }
 
 void chrdrv_exit(struct omap_i2c_dev *i2c_dev)
 {
 	// TODO: Delete the device file
+	device_destroy(i2c_dev->i2c_class, i2c_dev->devt);
 	// TODO: Unregister file operations
+	cdev_del(&i2c_dev->cdev);
 	// TODO: Unregister character driver
+	unregister_chrdev_region(i2c_dev->devt, 1);
+    
+	printk(KERN_INFO "Alvida: chrdrv_exit");
 }
 
